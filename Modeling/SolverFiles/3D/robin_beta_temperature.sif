check keywords warn

! name of the run used for the outputs
$name="robin_beta"

$ function waterpressure(Z) {\
  rhow = 1025.0;\
  waterline = 0.0;\
  G = 9.81;\
  _waterpressure = 0.0;\
  if (Z>waterline) {\
       _waterpressure = 0.0;\
  }else {\
       _waterpressure = 1.0 * rhow * G * (waterline - Z);\
  }\
}

! Parametre de rÃ©gularisation
$Lambda=1.0e10

!Reference Slip Coefficicient used to construct surface velocities
$ function betaSquare(tx) {\
  yearinsec = 365.25*24*60*60;\
  beta=1.0e5;\
  _betaSquare=beta*beta/(1.0e06*yearinsec);\
}

!Reference Viscosity used to construct surface velocities
$ function MuSquare(tx) {\
   yearinsec = 365.25*24*60*60;\
   mu=sqrt(1.8e08);\
  _MuSquare=mu*mu*1.0e-6*(2.0*yearinsec)^(-1.0/3.0);\
}

!some constants
$yearinsec = 365.25*24*60*60
$rhoi = 917.0/(1.0e6*yearinsec^2) ! MPa - a - m
$gravity = -9.81*yearinsec^2


Header
  Mesh DB "../../../../../Models/Helheim/Meshes/3D/Low" "elmer"
End


!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
Simulation
  Coordinate System = Cartesian 3D
  Simulation Type = Steady State

  Output Intervals = 1

  Steady State Max Iterations = 500
  Steady State Min Iterations = 1

  Output File = "$name".result"

  Initialize Dirichlet Conditions = Logical False

  max output level = 3
End
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

! Main ice body
Body 1
  Equation = 1
  Body Force = 1
  Material = 1
  Initial Condition = 1
End

! lower surface
Body 2
  Equation = 2
  Body Force = 1
  Material = 1
  Initial Condition = 1
End

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
Initial Condition 1
  BetaS = Variable Coordinate 1,
     REAL MATC "betaSquare(tx)"
  MuS = Variable Coordinate 3,
    Real Procedure "Rheology.so" "Viscosity"
  !MuS = Real $ (2.0*6.4e-25*yearinsec)^(-1.0/3.0)*1.0e-6 
  ! Using a mixed value from Habermann (Jakobshavn) and Nick (Helheim flowline), -5 deg C
  ! MuS = Variable coordinate 1, Coordinate 2
  !     REAL MATC "MuSquare(tx)"
 
! initial guess for (square root) slip coeff.
  Beta = REAL $ 1.0e3/sqrt(1.0e06*yearinsec)

  Pressure = Real 0.0
  Velocity 1 = Real 0.0
  Velocity 2 = Real 0.0
  Velocity 3 = Real 0.0

  VeloD 1 = Real 0.0
  VeloD 2 = Real 0.0
  VeloD 3 = Real 0.0
  VeloD 4 = Real 0.0

! Surface velocities (data)
  Vsurfini 1 = Variable Coordinate 1
     Real procedure "USF_Init.so" "UIni"
  Vsurfini 2 = Variable Coordinate 1
     Real procedure "USF_Init.so" "VIni"
End


!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
Body Force 1
  Flow BodyForce 1 = Real 0.0
  Flow BodyForce 2 = Real 0.0
  Flow BodyForce 3 = Real $gravity
End


!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!! ice material properties in MPa - m - a system
Material 1
  Density = Real $rhoi
  Viscosity Model = String "power law"

  Viscosity = Equals MuS

  Viscosity Exponent = Real $(1.0e00/3.0e00)
  Critical Shear Rate = Real 1.0e-10
End

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
Solver 1
  Equation = "Navier-Stokes"
  
  Stabilize = logical True
  flow model = Stokes
  
  Linear System Solver = Direct
  Linear System Direct Method = mumps
  mumps percentage increase working space = integer 60
  !Linear System Solver = Iterative
  ! Linear System Iterative Method = GMRES
  ! Linear System GMRES Restart = 100
  ! Linear System Preconditioning= ILU2
  ! Linear System Convergence Tolerance= 1.0e-08
  ! Linear System Max Iterations = 1000

!
  Nonlinear System Max Iterations = Integer 100
  Nonlinear System Convergence Tolerance = Real 1.0e-7
  Nonlinear System Newton After Iterations = Integer 10
  Nonlinear System Newton After Tolerance = Real 1.0e-03
  Nonlinear System Relaxation Factor = Real 1.0

  Nonlinear System Reset Newton = Logical True

  Steady State Convergence Tolerance = Real 1.0e-12

! Define some usefull Variables
  Exported Variable 1 = BetaS
  Exported Variable 1 DOFS = 1
  Exported Variable 2 = MuS
  Exported Variable 2 DOFS = 1

! square root of the slip coef
  Exported Variable 3 = Beta
  Exported Variable 3 DOFS = Integer 1
! derivative of the cost fn wr to beta
  Exported Variable 4 = DJDBeta
  Exported Variable 4 DOFS = Integer 1
! value of the cost function
  Exported Variable 5 = CostValue
  Exported Variable 5 DOFS = Integer 1

  Exported Variable 6 = VsurfIni
  Exported Variable 6 DOFS = Integer 2

End

!!!! Navier-Stokes = Dirichlet Problem
Solver 2
  Equation = "NS-Dirichlet"

  Variable = VeloD
  Variable Dofs = 4

  procedure = "FlowSolve" "FlowSolver"

  Linear System Solver = Direct
  Linear System Direct Method = mumps
  mumps percentage increase working space = integer 60
  !Linear System Solver = Iterative
  ! Linear System Iterative Method = GMRES
  ! Linear System GMRES Restart = 100
  ! Linear System Preconditioning= ILU2
  ! Linear System Convergence Tolerance= 1.0e-08
  ! Linear System Max Iterations = 1000


  Nonlinear System Max Iterations = Integer 100
  Nonlinear System Convergence Tolerance = Real 1.0e-7
  Nonlinear System Newton After Iterations = Integer 10
  Nonlinear System Newton After Tolerance = Real 1.0e-03
  Nonlinear System Relaxation Factor = Real 1.0

  Nonlinear System Reset Newton = Logical True

  Steady State Convergence Tolerance = Real 1.0e-12
End

!!! Compute Cost function
Solver 3
  Equation = "Cost"

!! Solver need to be associated => Define dumy variable
  Variable = -nooutput "CostV"
  Variable DOFs = 1

  procedure = "ElmerIceSolvers" "CostSolver_Robin"


  Cost Variable Name = String "CostValue" ! Name of Cost Variable

  Neumann Solution Name = String "Flow Solution"
  Dirichlet Solution Name = String "VeloD"

  Optimized Variable Name = String "Beta" ! Name of Beta for Regularization
  Lambda = Real $Lambda 	

  Cost Filename = File Cost_$name".dat" 
end

!!!!! Compute Derivative of Cost function / Beta

Solver 4
  Equation = "DJDBeta"

!! Solver need to be associated => Define dumy variable
  Variable = -nooutput "DJDB"
  Variable DOFs = 1

  procedure = "ElmerIceSolvers" "DJDBeta_Robin"
  
  Neumann Solution Name = String "Flow Solution"
  Dirichlet Solution Name = String "VeloD"
  Optimized Variable Name = String "Beta" ! Name of Beta variable
  Gradient Variable Name = String "DJDBeta" ! Name of gradient variable
  PowerFormulation = Logical False
  Beta2Formulation = Logical True ! SlipCoef define as Beta^2

  Lambda = Real $Lambda 
end

!!!!! Optimization procedure

Solver 5
  Equation = "Optimize_m1qn3"

!! Solver need to be associated => Define dumy variable
  Variable = -nooutput "UB"
  Variable DOFs = 1

  procedure = "ElmerIceSolvers" "Optimize_m1qn3Parallel"

  Cost Variable Name = String "CostValue"
  Optimized Variable Name = String "Beta"
  Gradient Variable Name = String "DJDBeta"
  gradient Norm File = String "GradientNormAdjoint_$name".dat"

! M1QN3 Parameters
  M1QN3 dxmin = Real 1.0e-10
  M1QN3 epsg = Real 1.e-6
  M1QN3 niter = Integer 200
  M1QN3 nsim = Integer 200
  M1QN3 impres = Integer 5
  M1QN3 DIS Mode = Logical False
  M1QN3 df1 = Real 0.5
  M1QN3 normtype = String "dfn"
  M1QN3 OutputFile = File "M1QN3_$name".out"
  M1QN3 ndz = Integer 20

end

Solver 6
  Equation = "ResultOutput"
  Procedure = File "ResultOutputSolve" "ResultOutputSolver"

  Output File Name = File "$name""
  Vtu Format = logical true
  Binary Output = True
  Single Precision = True

End

Solver 7
  Equation = SaveLine
  Procedure = "SaveData" "SaveLine"
  Exec Solver = String "After all"
  Filename = "elmer/beta.dat"
  
  !Parallel Reduce = Logical True
End

Solver 8
  Procedure = File "SaveData" "SaveScalars"
  Exec Solver = After TimeStep
  Filename =  ""$name"_mass.dat"
  !File Append = Logical True     ! For transient simulation
  Variable 1 = String "Flow Solution"
  Operator 1 = String "Convective Flux"
  Parallel Reduce = Logical True
End

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
Equation 1
  Active Solvers (6)= 1 2 3 6 7 8
  NS Convect= False
  Convection = Computed
End

Equation 2
 Active Solvers (3)= 4 5 7
 Convection = Computed
End

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
Boundary Condition 1
  Name = "Side Walls"
  Target Boundaries(1) = 4
 
  Normal-Tangential Velocity = Logical True
  Normal-Tangential VeloD = Logical True
  
  Velocity 1 = Real 0.0e0
  Slip Coefficient 2 = 1.0e-4
  Slip Coefficient 3 = 1.0e-4

  Save Line = Logical True
  Save Scalars = Logical True
End

Boundary Condition 2
  Name = "Inflow"
  Target Boundaries(1) = 5

! Dirichlet BCs
 ! Velocity 1 = Variable Coordinate 3
 !   Real procedure "SIA.so" "USIA"
 ! Velocity 2 = Variable Coordinate 3
 !   Real procedure "SIA.so" "VSIA"
 ! Velocity 3 = Real 0.0e0

!Dirichlet BC => Same Dirichlet
 ! VeloD 1 = Variable Coordinate 3
 !   Real procedure "SIA.so" "USIA"
 ! VeloD 2 = Variable Coordinate 3
 !   Real procedure "SIA.so" "VSIA"
 ! VeloD 3 = Real 0.0e0
 
 ! Dirichlet BCs
  Velocity 1 = Variable Coordinate 1
    Real procedure "UWA_Bnd.so" "UBnd"
  Velocity 2 = Variable Coordinate 1
    Real procedure "UWA_Bnd.so" "VBnd"

!Dirichlet BC => Same Dirichlet
  VeloD 1 = Variable Coordinate 1
    Real procedure "UWA_Bnd.so" "UBnd"
  VeloD 2 = Variable Coordinate 1
    Real procedure "UWA_Bnd.so" "VBnd"
  
  Save Line = Logical True
  Save Scalars = Logical True
End

Boundary Condition 3
  !Name= "bed" mandatory to compute regularistaion term of the cost function (int (dbeta/dx) 2)
  Name = "bed"
  Target Boundaries(1) = 1
  !Body Id used to solve
  Body ID = Integer 2

  Normal-Tangential Velocity = Logical True
  Normal-Tangential VeloD = Logical True

  Velocity 1 = Real 0.0e0
  VeloD 1 = Real 0.0e0

  Slip Coefficient 2 = Variable Beta
     REAL MATC "tx*tx"
  Slip Coefficient 3 = Variable Beta
     REAL MATC "tx*tx"
  
  Save Line = Logical True  
  Save Scalars = Logical True 
End

! Upper Surface
Boundary Condition 4
  !Name= "Surface" mandatory to compute cost function
  Name = "Surface"
  Target Boundaries(1) = 2

  ! Dirichlet problem applied observed velocities
  VeloD 1 = Equals Vsurfini 1
  VeloD 2 = Equals Vsurfini 2

  Save Line = Logical True
  Save Scalars = Logical True
End 


Boundary Condition 5
  Name = "Calving front"
  Target Boundaries(1) = 3
  
!  Flow Force BC = Logical True
!  External Pressure = Variable Coordinate 3 !we are in MPa units
!    Real MATC "-1.0*waterpressure(tx)*1.0E-06"
    
! Dirichlet BCs
  Velocity 1 = Variable Coordinate 1
    Real procedure "UWA_Bnd.so" "UBnd"
  Velocity 2 = Variable Coordinate 1
    Real procedure "UWA_Bnd.so" "VBnd"

!Dirichlet BC => Same Dirichlet
  VeloD 1 = Variable Coordinate 1
    Real procedure "UWA_Bnd.so" "UBnd"
  VeloD 2 = Variable Coordinate 1
    Real procedure "UWA_Bnd.so" "VBnd"

  Save Line = Logical True
  Save Scalars = Logical True
End
