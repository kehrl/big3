check keywords warn

! Output name
$name="robin_beta"

! Regularization parameter 
$Lambda=1e10

! Reference Slip Coefficient used to construct surface velocities
$ function betaSquare(tx) {\
  yearinsec = 365.25*24*60*60;\
  beta=1.0e6;\
  _betaSquare=beta*beta/(1.0e06*yearinsec);\
}


! Water pressure at ice front
$ function waterpressure(Z) {\
  rhow = 1025.0;\
  waterline = 0.0;\
  G = 9.81;\
  _waterpressure = 0.0;\
  if (Z>waterline) {\
       _waterpressure = 0.0;\
  }else {\
       _waterpressure = 1.0 * rhow * G * (waterline - Z);\
  }\
}

! Constants
$yearinsec = 365.25*24*60*60
$rhoi = 917.0/(1.0e6*yearinsec^2) ! MPa - a - m
$rhow = 1025.0/(1.0e6*yearinsec^2) ! MPa - a - m
$gravity = -9.81*yearinsec^2
$n=3

Header
  Mesh DB "Mesh_Input" "Elmer"
End


!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
Simulation
  Coordinate System = Cartesian 2D
  Simulation Type = Steady State

  Output Intervals = 1

  Steady State Max Iterations = 1000
  Steady State Min Iterations = 1

  Initialize Dirichlet Conditions = Logical False

  Max output level = 3
End
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

! Main ice body
Body 1
  Equation = 1
  Body Force = 1
  Material = 1
  Initial Condition = 1
End

! Bedrock
Body 2
  Equation = 2
  Body Force = 1
  Material = 1
  Initial Condition = 1
End

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
Initial Condition 1
  Depth = Real 0.0
  BetaS = Variable Coordinate 1,
     REAL MATC "betaSquare(tx)"
  MuS = Variable Coordinate 2,
    Real Procedure "Flowline.so" "Viscosity"
 
! Initial guess for (square root) slip coeff.
  Beta = REAL $ 1.0e3/sqrt(1.0e06*yearinsec)

  Pressure = Real 0.0
  Velocity 1 = Real 0.0
  Velocity 2 = Real 0.0

  VeloD 1 = Real 0.0
  VeloD 2 = Real 0.0
  VeloD 3 = Real 0.0

! Surface velocities (data)
  Vsurfini 1 = Variable Coordinate 1
     Real procedure "Flowline.so" "USF_Init"
End


!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
Body Force 1
  ! Shape factor
  !Flow BodyForce 1 = Variable Coordinate 1
  !   Real Procedure "ElmerIceUSF" "ShapeFactorGravity_x"
  !Flow BodyForce 2 = Variable Coordinate 1
  !   Real Procedure "ElmerIceUSF" "ShapeFactorGravity_y"
  !Shape Gravity 1 = Real  0.0                                 
  !Shape Gravity 2 = Real $gravity      
  
  !Shape Factor = Variable Coordinate 1
  !  Real
  !    Include "Inputs/shapefactor.dat"
  !  End
  
  ! Lateral Friction, Gagliardini 2010
  Flow BodyForce 1 = Variable Coordinate 1
     Real Procedure "ElmerIceUSF" "LateralFriction_x"
  Flow BodyForce 2 = Variable Coordinate 1
     Real Procedure "ElmerIceUSF" "LateralFriction_y"
  Lateral Friction Gravity 1 = Real 0.0    
  Lateral Friction Gravity 2 = Real $gravity    
  Lateral Friction Coefficient = Variable Coordinate 1
    Real Procedure "Flowline.so" "LateralFrictionCoefficient"
  Lateral Friction Exponent = Real $(1.0/n)
  Flow Solver Name = String Flow Solution
  
  ! Account for lateral convergence
  Pressure Load = Variable Coordinate 1
    Real Procedure "Flowline.so" "LateralConvergence"
End


!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!! ice material properties in MPa - m - a system
Material 1
  Density = Real $rhoi
  Viscosity Model = String "power law"

  Viscosity = Equals MuS

  Viscosity Exponent = Real $1.0e00/3.0e00
  Critical Shear Rate = Real 1.0e-10
End

Solver 1
  Procedure = "SaveData" "SaveMaterials"
  Parameter 1 = "Viscosity"
End

Solver 2
   Exec Solver = "Before Timestep"
   Equation = "Normal Vector"
   Variable = "Normal Vector"   

   Variable DOFs = 2 
   Procedure = "ElmerIceSolvers" "ComputeNormalSolver"
   Optimize Bandwidth = Logical False 
   ComputeAll = Logical False
End

!!!! Navier-Stokes Solution
Solver 3
 Equation = "Navier-Stokes"
  
  Stabilize = logical True
  flow model = Stokes
  
  Linear System Solver = Direct
  Linear System Direct Method = MUMPS
  Mumps Percentage Increase Working Space = Integer 60

!
  Nonlinear System Max Iterations = Integer 1000
  Nonlinear System Convergence Tolerance = Real 1.0e-7
  Nonlinear System Newton After Iterations = Integer 10
  Nonlinear System Newton After Tolerance = Real 1.0e-03
  Nonlinear System Relaxation Factor = Real 1.0

  Nonlinear System Reset Newton = Logical True

  Steady State Convergence Tolerance = Real 1.0e-12
  
  Calculate Loads = Logical True
  Calculate Weights = Logical True

! Define some usefull Variables
  Exported Variable 1 = BetaS
  Exported Variable 1 DOFS = 1
  Exported Variable 2 = MuS
  Exported Variable 2 DOFS = 1

! square root of the slip coef
  Exported Variable 3 = Beta
  Exported Variable 3 DOFS = Integer 1
! derivative of the cost fn wr to beta
  Exported Variable 4 = DJDBeta
  Exported Variable 4 DOFS = Integer 1
! value of the cost function
  Exported Variable 5 = CostValue
  Exported Variable 5 DOFS = Integer 1

  Exported Variable 6 = VsurfIni
  Exported Variable 6 DOFS = Integer 2

End

!!!! Navier-Stokes = Dirichlet Problem
Solver 4
  Equation = "NS-Dirichlet"

  Variable = VeloD
  Variable Dofs = 3

  procedure = "FlowSolve" "FlowSolver"

  Linear System Solver = Direct
  Linear System Direct Method =  mumps
  Mumps percentage increase working space = integer 60
  !Linear System Solver = Iterative
  !Linear System Iterative Method = GMRES
  !Linear System GMRES Restart = 100
  Linear System Preconditioning= ILU0
  Linear System Convergence Tolerance= 1.0e-08
  Linear System Max Iterations = 1000
  Linear System Abort Not Converged = False


  Nonlinear System Max Iterations = Integer 100
  Nonlinear System Convergence Tolerance = Real 1.0e-7
  Nonlinear System Newton After Iterations = Integer 10
  Nonlinear System Newton After Tolerance = Real 1.0e-03
  Nonlinear System Relaxation Factor = Real 1.0

  Nonlinear System Reset Newton = Logical True

  Steady State Convergence Tolerance = Real 1.0e-12
End

!!! Compute Cost function
Solver 5

  Equation = "Cost"

!! Solver need to be associated => Define dumy variable
  Variable = -nooutput "CostV"
  Variable DOFs = 1

  procedure = "ElmerIceSolvers" "CostSolver_Robin"


  Cost Variable Name = String "CostValue" ! Name of Cost Variable

  Neumann Solution Name = String "Flow Solution"
  Dirichlet Solution Name = String "VeloD"

  Optimized Variable Name = String "Beta" ! Name of Beta for Regularization
  Lambda = Real $Lambda 	

  ! save the cost as a function of iterations
  Cost Filename = File "cost_robin_beta.dat" 
end

!!!!! Compute Derivative of Cost function / Beta
Solver 6
  Equation = "DJDBeta"

!! Solver need to be associated => Define dumy variable
  Variable = -nooutput "DJDB"
  Variable DOFs = 1

  procedure = "ElmerIceSolvers" "DJDBeta_Robin"
  
  Neumann Solution Name = String "Flow Solution"
  Dirichlet Solution Name = String "VeloD"
  Optimized Variable Name = String "Beta" ! Name of Beta variable
  Gradient Variable Name = String "DJDBeta" ! Name of gradient variable
  PowerFormulation = Logical False
  Beta2Formulation = Logical True ! SlipCoef define as Beta^2

  Lambda = Real $Lambda 
end

!!!!! Optimization procedure
Solver 7
  Equation = "Optimize_m1qn3"

!! Solver need to be associated => Define dumy variable
  Variable = -nooutput "UB"
  Variable DOFs = 1

  procedure = "ElmerIceSolvers" "Optimize_m1qn3Parallel"

  Cost Variable Name = String "CostValue"
  Optimized Variable Name = String "Beta"
  Gradient Variable Name = String "DJDBeta"
  Gradient Norm File = String "GradientNormAdjoint_$name".dat"


! M1QN3 Parameters
  M1QN3 dxmin = Real 1.0e-10
  M1QN3 epsg = Real 1.e-6
  M1QN3 niter = Integer 200
  M1QN3 nsim = Integer 200
  M1QN3 impres = Integer 5
  M1QN3 DIS Mode = Logical False
  M1QN3 df1 = Real 0.5
  M1QN3 normtype = String "dfn"
  M1QN3 OutputFile = File "M1QN3_$name".out"
  M1QN3 ndz = Integer 20

end

Solver 8
  Equation = "ResultOutput"

  Procedure = File "ResultOutputSolve" "ResultOutputSolver"

  Output File Name = File "$name""
  Vtu Format = logical true
  Binary Output = True
  Single Precision = True

End

Solver 9
  Equation = SaveLine
  Procedure = "SaveData" "SaveLine"
  Exec Solver = String "After all"
  Filename = "elmer/beta.dat"
End

Solver 10
  Equation = String "StressSolver"
  Procedure = "ElmerIceSolvers" "ComputeDevStress"          
  Variable = -nooutput "Sij"
  Variable DOFs = 1
  Exported Variable 1 = Stress[Sxx:1 Syy:1 Szz:1 Sxy:1]
  Exported Variable 1 DOFs = 4
  
  Flow Solver Name = String "Flow Solution"
  Stress Variable Name = String "Stress"
  ! Linear System Solver = Direct         
  ! Linear System Direct Method = mumps
  Linear System Solver = Iterative
  Linear System Iterative Method = GMRES
  Linear System GMRES Restart = 100
  Linear System Preconditioning= ILU2
  Linear System Convergence Tolerance= 1.0e-08
  Linear System Max Iterations = 1000
End

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
Equation 1
  Active Solvers (7)= 1 2 3 4 5 8 10
  NS Convect= False
End

Equation 2
 Active Solvers (3)= 6 7 9
End

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
Boundary Condition 1
  !Name= "bed" mandatory to compute regularistaion term of the cost function (int (dbeta/dx) 2)
  Name = "bed"
  Target Boundaries(1) = 1
  Body ID = Integer 2
  Shape Bedrock = Logical True
  Save Line = Logical True

  Compute Normal = Logical True
  Normal-Tangential Velocity = Logical True
  Normal-Tangential VeloD = Logical True
  Flow Force BC = Logical True

  Velocity 1 = Real 0.0e0
  VeloD 1 = Real 0.0e0

  Slip Coefficient 2 = Variable Beta
     REAL MATC "tx*tx"

End

! Upper Surface
Boundary Condition 2
  !Name= "Surface" mandatory to compute cost function
  Name = "Surface"
  Target Boundaries(1) = 3
  Shape Surface = Logical True
  Save Line = Logical True

  ! Dirichlet problem applied observed velocities
  VeloD 1 = Equals Vsurfini 1
End 

Boundary Condition 3
  Name = "Inflow"
  Target Boundaries(1) = 4

! Dirichlet BCs
  Velocity 1 = Variable Coordinate 2
    Real procedure "Flowline.so" "Inflow"

!Dirichlet BC => Same Dirichlet
  VeloD 1 = Variable Coordinate 2
    Real procedure "Flowline.so" "Inflow"
End

Boundary Condition 4
  Name = "Calving front"
  Target Boundaries(1) = 2
  Flow Force BC = Logical True
  
  External Pressure = Variable Coordinate 2 !we are in MPa units
    Real MATC "-1.0*waterpressure(tx)*1.0E-06"
    
End